generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String?
  email         String  @unique
  image         String?
  emailVerified DateTime? // ðŸ‘ˆ Required for NextAuth
  createdAt     DateTime @default(now())

  boards        Board[]       @relation("UserBoards")
  collaborations BoardParticipant[]
  comments      Comment[]
  sessions      Session[]
  accounts      Account[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Board {
  id            String   @id @default(uuid())
  title         String
  createdById   String
  createdAt     DateTime @default(now())

  createdBy     User     @relation(fields: [createdById], references: [id], name: "UserBoards")
  participants  BoardParticipant[]
  shapes        Shape[]
  comments      Comment[]
}

model BoardParticipant {
  id       String @id @default(uuid())
  boardId  String
  userId   String
  joinedAt DateTime @default(now())

  board    Board @relation(fields: [boardId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
}

model Shape {
  id       String @id @default(uuid())
  boardId  String
  type     String  // e.g., "rectangle", "circle", "line"
  x        Float
  y        Float
  width    Float?
  height   Float?
  radius   Float?
  color    String
  stroke   String?
  strokeWidth Float?
  createdAt DateTime @default(now())

  board    Board @relation(fields: [boardId], references: [id])
}

model Comment {
  id       String  @id @default(uuid())
  boardId  String
  userId   String
  text     String
  createdAt DateTime @default(now())

  board    Board @relation(fields: [boardId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
